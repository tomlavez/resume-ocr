from contextlib import asynccontextmanager
from fastapi import FastAPI

from app.routers import analysis
from app.services.database_service import close_database_connection


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o FastAPI.
    
    Startup: Inicializa√ß√£o de recursos
    Shutdown: Limpeza de recursos
    """
    # Startup
    print("üöÄ Iniciando TechMatch Resume Analyzer - vers√£o 1.0.0")
    print("‚úÖ Aplica√ß√£o inicializada com sucesso")
    
    yield
    
    # Shutdown
    print("üîÑ Encerrando aplica√ß√£o...")
    await close_database_connection()
    print("‚úÖ Aplica√ß√£o encerrada com sucesso")


# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="üéØ TechMatch Resume Analyzer",
    description="""
## Sistema de An√°lise de Curr√≠culos com IA

Analise curr√≠culos automaticamente usando OCR e Intelig√™ncia Artificial.

### Funcionalidades Principais:
- **An√°lise com Query**: Ranqueia curr√≠culos por adequa√ß√£o √† vaga (0-10)
- **An√°lise sem Query**: Gera resumos identificando senioridade
- **Processamento Ass√≠ncrono**: M√∫ltiplos arquivos simultaneamente
- **M√∫ltiplos Formatos**: PDF, PNG, JPG, JPEG

### Limites T√©cnicos:
- **Arquivos**: M√°ximo 20 por requisi√ß√£o
- **Tamanho**: M√°ximo 10MB por arquivo
- **Processamento**: 5 arquivos simult√¢neos
- **Formatos**: PDF, PNG, JPG, JPEG
    """,
    version="1.0.0",
    lifespan=lifespan
)

# Inclus√£o dos routers
app.include_router(analysis.router)

# Log de inicializa√ß√£o
print("üöÄ TechMatch Resume Analyzer iniciado - vers√£o 1.0.0")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 