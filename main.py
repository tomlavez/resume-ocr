from contextlib import asynccontextmanager
from fastapi import FastAPI
import logging
import time

from app.routers import analysis
from app.services.database_service import close_database_connection
from app.config.logging_config import setup_logging

# Configurar logging
setup_logging()
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o FastAPI.
    
    Startup: Inicializa√ß√£o de recursos
    Shutdown: Limpeza de recursos
    """
    # Startup
    start_time = time.time()
    logger.info("üöÄ Iniciando TechMatch Resume Analyzer v1.0.0")
    
    try:
        # Aqui poderiam ser adicionadas valida√ß√µes de depend√™ncias
        logger.info("‚úÖ Aplica√ß√£o inicializada com sucesso")
    except Exception as e:
        logger.critical(f"‚ùå Falha cr√≠tica na inicializa√ß√£o: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üîÑ Encerrando aplica√ß√£o...")
    try:
        await close_database_connection()
        shutdown_time = time.time() - start_time
        logger.info(f"‚úÖ Aplica√ß√£o encerrada com sucesso - Uptime: {shutdown_time:.1f}s")
    except Exception as e:
        logger.error(f"‚ùå Erro durante encerramento: {e}")

# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="üéØ TechMatch Resume Analyzer",
    description="""
## Sistema de An√°lise de Curr√≠culos com IA

Analise curr√≠culos automaticamente usando OCR e Intelig√™ncia Artificial.

### Funcionalidades Principais:
- **An√°lise com Query**: Ranqueia curr√≠culos por adequa√ß√£o √† vaga (0-10)
- **An√°lise sem Query**: Gera resumos identificando senioridade
- **Processamento Ass√≠ncrono**: M√∫ltiplos arquivos simultaneamente
- **M√∫ltiplos Formatos**: PDF, PNG, JPG, JPEG

### Limites T√©cnicos:
- **Arquivos**: M√°ximo 20 por requisi√ß√£o
- **Tamanho**: M√°ximo 10MB por arquivo
- **Processamento**: 5 arquivos simult√¢neos
- **Formatos**: PDF, PNG, JPG, JPEG
    """,
    version="1.0.0",
    lifespan=lifespan
)

# Inclus√£o dos routers
app.include_router(analysis.router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 