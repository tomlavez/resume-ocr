import uuid
import time
import asyncio

from concurrent.futures import ThreadPoolExecutor
from typing import List, Optional, Union
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from pydantic import BaseModel, Field

import app.ocr as ocr
import app.llm_service as llm_service
import app.database as database

class ResumeResult(BaseModel):
    """Resultado da an√°lise de um curr√≠culo individual."""
    filename: str = Field(..., description="Nome do arquivo processado", example="joao_silva.pdf")
    score: Union[float, str] = Field(..., description="Pontua√ß√£o 0-10 (com query) ou n√≠vel de senioridade (sem query)", examples=[8.5, "s√™nior"])
    summary: str = Field(..., description="Resumo detalhado da an√°lise do candidato", example="Desenvolvedor full-stack com 8 anos de experi√™ncia em React, Node.js e AWS. Lideran√ßa t√©cnica em projetos de grande escala.")

class AnalysisResponse(BaseModel):
    """Resposta completa da an√°lise de curr√≠culos."""
    request_id: str = Field(..., description="UUID v4 da requisi√ß√£o", example="f47ac10b-58cc-4372-a567-0e02b2c3d479")
    results: List[ResumeResult] = Field(..., description="Lista de curr√≠culos analisados com sucesso")

class ErrorDetail(BaseModel):
    """Detalhes de erro para falhas de processamento."""
    message: str = Field(..., description="Mensagem de erro principal")
    failed_files: List[str] = Field(..., description="Lista de arquivos que falharam no processamento")
    request_id: str = Field(..., description="UUID da requisi√ß√£o que falhou")

class ValidationError(BaseModel):
    """Erro de valida√ß√£o de entrada."""
    detail: str = Field(..., description="Descri√ß√£o detalhada do erro de valida√ß√£o", 
                       examples=[
                           "request_id deve ser um UUID v4 v√°lido.",
                           "user_id n√£o pode ser vazio.",
                           "user_id muito longo. M√°ximo de 50 caracteres.",
                           "query muito longa. M√°ximo de 2500 caracteres.",
                           "Pelo menos um arquivo deve ser enviado.",
                           "Um dos arquivos foi enviado sem nome."
                       ])

class PayloadTooLargeError(BaseModel):
    """Erro de payload muito grande."""
    detail: str = Field(..., description="Descri√ß√£o do erro de tamanho", 
                       examples=[
                           "Payload Too Large: O n√∫mero m√°ximo de arquivos √© 20.",
                           "Arquivo 'curriculo_grande.pdf' √© muito grande. M√°ximo de 10MB.",
                           "Payload Too Large: Tamanho total da requisi√ß√£o excede o limite permitido."
                       ])

class UnsupportedMediaTypeError(BaseModel):
    """Erro de tipo de arquivo n√£o suportado."""
    detail: str = Field(..., description="Descri√ß√£o do erro de formato", 
                       examples=[
                           "Unsupported Media Type: O formato do arquivo 'curriculo.docx' n√£o √© suportado. Use PDF, PNG, JPG ou JPEG.",
                           "Unsupported Media Type: O arquivo 'curriculo' n√£o possui extens√£o.",
                           "Unsupported Media Type: O formato do arquivo 'curriculo.txt' n√£o √© suportado. Use PDF, PNG, JPG ou JPEG."
                       ])

class ProcessingFailureError(BaseModel):
    """Erro de falha total no processamento."""
    detail: ErrorDetail = Field(..., description="Detalhes da falha de processamento")

class InternalServerError(BaseModel):
    """Erro interno do servidor."""
    detail: str = Field(..., description="Descri√ß√£o do erro interno", 
                       examples=[
                           "Internal Server Error: Erro inesperado no servidor. Tente novamente mais tarde.",
                           "Internal Server Error: Erro ao acessar banco de dados. Tente novamente mais tarde.",
                           "Internal Server Error: Servi√ßo de OCR indispon√≠vel. Tente novamente mais tarde.",
                           "Internal Server Error: Servi√ßo de IA indispon√≠vel. Tente novamente mais tarde.",
                           "Internal Server Error: Timeout no processamento. Reduza o n√∫mero de arquivos ou tente novamente."
                       ])

app = FastAPI(
    title="üéØ TechMatch Resume Analyzer",
    description="""
## Sistema de An√°lise de Curr√≠culos com IA

Analise curr√≠culos automaticamente usando OCR e Intelig√™ncia Artificial.

### Funcionalidades Principais:
- **An√°lise com Query**: Ranqueia curr√≠culos por adequa√ß√£o √† vaga (0-10)
- **An√°lise sem Query**: Gera resumos identificando senioridade
- **Processamento Ass√≠ncrono**: M√∫ltiplos arquivos simultaneamente
- **M√∫ltiplos Formatos**: PDF, PNG, JPG, JPEG

### Limites T√©cnicos:
- **Arquivos**: M√°ximo 20 por requisi√ß√£o
- **Tamanho**: M√°ximo 10MB por arquivo
- **Processamento**: 5 arquivos simult√¢neos
- **Formatos**: PDF, PNG, JPG, JPEG
    """,
    version="1.0.0",
)

print("üöÄ TechMatch Resume Analyzer iniciado - vers√£o 1.0.0")

MAX_FILES = 20
MAX_USER_ID_LENGTH = 50
MAX_QUERY_LENGTH = 2500
MAX_FILE_SIZE = 10 * 1024 * 1024
MAX_RETRIES = 3
ALLOWED_EXTENSIONS = {'.pdf', '.png', '.jpg', '.jpeg'}
MAX_CONCURRENT_PROCESSES = 5 

def validate_form_inputs(request_id: str, user_id: str, query: Optional[str]):
    """Valida os campos de texto e UUID do formul√°rio."""
    try:
        uuid_obj = uuid.UUID(request_id)
        if uuid_obj.version != 4:
            raise ValueError("UUID deve ser vers√£o 4")
    except ValueError:
        raise HTTPException(status_code=422, detail="request_id deve ser um UUID v4 v√°lido.")

    if not user_id or not user_id.strip():
        raise HTTPException(status_code=422, detail="user_id n√£o pode ser vazio.")
        
    if len(user_id) > MAX_USER_ID_LENGTH:
        raise HTTPException(status_code=422, detail=f"user_id muito longo. M√°ximo de {MAX_USER_ID_LENGTH} caracteres.")

    if query and len(query) > MAX_QUERY_LENGTH:
        raise HTTPException(status_code=422, detail=f"query muito longa. M√°ximo de {MAX_QUERY_LENGTH} caracteres.")
    
def validate_file_list(files: List[UploadFile]):
    """Valida a lista de arquivos como um todo."""

    if not files:
        raise HTTPException(status_code=422, detail="Pelo menos um arquivo deve ser enviado.")
    
    if len(files) > MAX_FILES:
        raise HTTPException(status_code=413, detail=f"Payload Too Large: O n√∫mero m√°ximo de arquivos √© {MAX_FILES}.")

    for i, file in enumerate(files):
        if not file.filename or not file.filename.strip():
            raise HTTPException(status_code=422, detail="Um dos arquivos foi enviado sem nome.")
        
        if '.' not in file.filename:
            raise HTTPException(status_code=415, detail=f"Unsupported Media Type: O arquivo '{file.filename}' n√£o possui extens√£o.")
        
        file_ext = '.' + file.filename.lower().rsplit('.', 1)[-1]
        if file_ext not in ALLOWED_EXTENSIONS:
            raise HTTPException(status_code=415, detail=f"Unsupported Media Type: O formato do arquivo '{file.filename}' n√£o √© suportado. Use PDF, PNG, JPG ou JPEG.")

        if hasattr(file, 'size') and file.size and file.size > MAX_FILE_SIZE:
            raise HTTPException(status_code=413, detail=f"Arquivo '{file.filename}' √© muito grande. M√°ximo de {MAX_FILE_SIZE // (1024*1024)}MB.")
    
async def _validate_file_content(file: UploadFile) -> dict:
    """Valida o conte√∫do do arquivo de forma ass√≠ncrona."""
    filename = file.filename
    
    try:
        file.file.seek(0)
        file_bytes = await file.read()
        
        if not file_bytes:
            return {"filename": filename, "error": "Arquivo vazio."}
        
        return {"file_bytes": file_bytes, "filename": filename}
    
    except Exception as e:
        return {"filename": filename, "error": f"Erro ao ler arquivo: {str(e)}"}

async def _run_ocr(file_bytes: bytes, filename: str) -> Union[ocr.OcrResponse, ocr.OcrError]:
    """Executa OCR de forma ass√≠ncrona usando thread pool."""
    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor() as executor:
        return await loop.run_in_executor(
            executor, 
            ocr.extract_text_from_file, 
            file_bytes, 
            filename
        )

async def _run_llm_analysis(text: str, query: Optional[str]) -> Union[llm_service.AnalysisResponse, llm_service.AnalysisResponseNoQuery, llm_service.AnalysisError]:
    """Executa an√°lise LLM de forma ass√≠ncrona usando thread pool."""
    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor() as executor:
        return await loop.run_in_executor(
            executor, 
            llm_service.get_llm_analysis, 
            text, 
            query
        )

async def _process_single_resume(file: UploadFile, query: Optional[str]) -> dict:
    """Processa um √∫nico curr√≠culo de forma ass√≠ncrona com retry autom√°tico."""
    filename = file.filename
    
    # Valida√ß√µes b√°sicas
    validation_result = await _validate_file_content(file)
    if "error" in validation_result:
        return validation_result
    
    file_bytes = validation_result["file_bytes"]
    
    # OCR com retry
    for attempt in range(MAX_RETRIES):
        try:
            extracted_text = await _run_ocr(file_bytes, filename)
        except Exception as e:
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(0.5 * (attempt + 1))
                continue
            else:
                return {"filename": filename, "error": f"Erro de OCR: {str(e)}"}
        
        if isinstance(extracted_text, ocr.OcrError):
            return {"filename": filename, "error": f"Erro de OCR: {extracted_text.error}"}

        # An√°lise do LLM
        try:
            analysis = await _run_llm_analysis(extracted_text.text, query)
        except Exception as e:
            return {"filename": filename, "error": f"Erro na an√°lise de IA: {str(e)}"}
        
        if isinstance(analysis, llm_service.AnalysisError):
            return {"filename": filename, "error": f"Erro na an√°lise de IA: {analysis.error}"}
        
        # Sucesso em ambas as opera√ß√µes
        return {
            "filename": filename,
            "score": analysis.score,
            "summary": analysis.summary
        }

    # Erro final
    return {"filename": filename, "error": "N√£o foi poss√≠vel processar o curr√≠culo ap√≥s os retries."}

async def process_resumes_concurrently(files: List[UploadFile], query: Optional[str]) -> List[dict]:
    """Processa os curr√≠culos de forma ass√≠ncrona e concorrente com limite de concorr√™ncia."""
    
    # Sem√°foro para lidar com concorr√™ncias
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_PROCESSES)
    
    async def process_with_semaphore(file: UploadFile) -> dict:
        async with semaphore:
            return await _process_single_resume(file, query)
    
    # Executa todos os processamentos de forma concorrente
    tasks = [process_with_semaphore(file) for file in files]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # Processa os resultados e trata exce√ß√µes
    processed_results = []
    for i, result in enumerate(results):
        if isinstance(result, Exception):
            processed_results.append({
                "filename": files[i].filename,
                "error": f"Erro inesperado: {str(result)}"
            })
        else:
            processed_results.append(result)
    
    return processed_results

def safe_get_score(candidate: dict) -> float:
    """Extrai a pontua√ß√£o de forma segura para ordena√ß√£o."""
    try:
        score = candidate.get('score', 0.0)
        return float(score) if score is not None else 0.0
    except (ValueError, TypeError):
        return 0.0

# --- Endpoint √önico e Validado ---
@app.post(
    "/analyze/", 
    summary="Analisa Curr√≠culos com IA",
    description="""
## An√°lise Inteligente de Curr√≠culos

Processa um ou m√∫ltiplos curr√≠culos usando OCR e IA para extrair informa√ß√µes relevantes.

### Modos de Opera√ß√£o:

#### **Sem Query** (An√°lise Geral)
- Gera resumo identificando senioridade do candidato
- Score retornado como string: "j√∫nior", "pleno", "s√™nior"

#### **Com Query** (An√°lise Direcionada)  
- Ranqueia candidatos por adequa√ß√£o √† vaga espec√≠fica
- Score retornado como float de 0.0 a 10.0
- Resultados ordenados por pontua√ß√£o (maior para menor)
    """,
    response_model=AnalysisResponse,
    responses={
        200: {
            "description": "An√°lise realizada com sucesso",
            "content": {
                "application/json": {
                    "examples": {
                        "analise_sem_query": {
                            "summary": "An√°lise Geral (Sem Query)",
                            "description": "Exemplo de resposta para an√°lise sem uma query espec√≠fica",
                            "value": {
                                "request_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                                "results": [
                                    {
                                        "filename": "nicolas_azevedo.png",
                                        "score": "Senior",
                                        "summary": "Nicolas Azevedo √© um arquiteto de software s√™nior com 15 anos de experi√™ncia, especializado em desenhar e implementar solu√ß√µes complexas, seguras e otimizadas para a nuvem. Possui certifica√ß√µes em AWS e Azure e √°reas de especializa√ß√£o em arquitetura de microservi√ßos e serverless, estrat√©gias de migra√ß√£o para nuvem, governan√ßa e otimiza√ß√£o de custos, seguran√ßa e compliance em nuvem e arquitetura orientada a eventos. Com uma carreira consolidada em empresas como Accenture e Telef√©nica Vivo, Nicolas demonstra uma grande experi√™ncia em lideran√ßa e gest√£o de projetos."
                                    },
                                    {
                                        "filename": "fernanda_lima.pdf",
                                        "score": "Pleno",
                                        "summary": "Fernanda Lima √© uma desenvolvedora frontend com 4 anos de experi√™ncia em cria√ß√£o de interfaces de usu√°rio reativas, perform√°ticas e acess√≠veis. Ela tem um foco em componentiza√ß√£o com React e melhoria da experi√™ncia do usu√°rio (UX). Com experi√™ncia em empresas como Fintech Neon e Startup Voo Livre, Fernanda demonstra habilidades em desenvolvimento de aplicativos em React.js e TypeScript, colabora√ß√£o em design systems, implementa√ß√£o de testes e otimiza√ß√£o de performance e SEO."
                                    },
                                ]
                            }
                        },
                        "analise_com_query": {
                            "summary": "An√°lise Direcionada (Com Query)",
                            "description": "Exemplo de resposta para an√°lise com uma query espec√≠fica de vaga",
                            "value": {
                                "request_id": "550e8400-e29b-41d4-a716-446655440001",
                                "results": [
                                    {
                                        "filename": "tatiana_guedes.pdf",
                                        "score": 6.5,
                                        "summary": "O curr√≠culo de Tatiana Guedes apresenta uma boa alinhamento com a requisi√ß√£o, especialmente em rela√ß√£o √†s habilidades em bancos de dados relacionais e otimiza√ß√£o de performance. No entanto, falta experi√™ncia direta com o ecossistema de Big Data, servi√ßos de dados da AWS e ferramentas de orquestra√ß√£o como Apache Airflow."
                                    },
                                    {
                                        "filename": "nicolas_azevedo.png",
                                        "score": 6.4,
                                        "summary": "O curr√≠culo de Nicolas Azevedo apresenta uma boa alinhamento com a requisi√ß√£o, especialmente em rela√ß√£o √† experi√™ncia com AWS, arquitetura de solu√ß√µes e governan√ßa de custos. No entanto, falta experi√™ncia direta com ferramentas de orquestra√ß√£o como Apache Airflow e processamento de dados com Python ou Scala. Al√©m disso, a falta de experi√™ncia com Big Data e servi√ßos de dados da AWS (S3, Glue, EMR, Redshift) √© um ponto negativo."
                                    },
                                    {
                                        "filename": "fernanda_lima.pdf",
                                        "score": 2.5,
                                        "summary": "O curr√≠culo n√£o apresenta alinhamento com a requisi√ß√£o, pois o candidato tem experi√™ncia em desenvolvimento frontend e n√£o em engenharia de dados. A falta de experi√™ncia em Python, Scala, Apache Airflow, Apache Spark, AWS e SQL √© significativa."
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        400: {
            "description": "‚ùå Erro de Request - Dados inv√°lidos ou malformados",
            "content": {
                "application/json": {
                    "examples": {
                        "request_malformado": {
                            "summary": "Request malformado",
                            "description": "Quando o request n√£o est√° no formato correto (ex: JSON inv√°lido, form-data malformado)",
                            "value": {
                                "detail": "Bad Request: Request malformado ou dados inv√°lidos."
                            }
                        },
                        "multipart_invalido": {
                            "summary": "Multipart/form-data inv√°lido",
                            "description": "Quando o formato multipart/form-data est√° corrompido ou incompleto",
                            "value": {
                                "detail": "Bad Request: Formato multipart/form-data inv√°lido."
                            }
                        }
                    }
                }
            }
        },
        413: {
            "description": "‚ùå Payload muito grande - Limites de tamanho excedidos",
            "content": {
                "application/json": {
                    "examples": {
                        "muitos_arquivos": {
                            "summary": "Muitos arquivos enviados",
                            "description": "Enviados mais de 20 arquivos na requisi√ß√£o",
                            "value": {
                                "detail": "Payload Too Large: O n√∫mero m√°ximo de arquivos √© 20."
                            }
                        },
                        "arquivo_muito_grande": {
                            "summary": "Arquivo individual muito grande",
                            "description": "Um arquivo espec√≠fico excede o limite de 10MB",
                            "value": {
                                "detail": "Arquivo 'curriculo_grande.pdf' √© muito grande. M√°ximo de 10MB."
                            }
                        },
                        "payload_total_grande": {
                            "summary": "Payload total muito grande",
                            "description": "O tamanho total da requisi√ß√£o excede os limites do servidor",
                            "value": {
                                "detail": "Payload Too Large: Tamanho total da requisi√ß√£o excede o limite permitido."
                            }
                        }
                    }
                }
            }
        },
        415: {
            "description": "‚ùå Formato n√£o suportado - Tipo de arquivo inv√°lido", 
            "content": {
                "application/json": {
                    "examples": {
                        "formato_nao_suportado": {
                            "summary": "Formato de arquivo n√£o suportado",
                            "description": "Arquivo com extens√£o n√£o permitida (apenas PDF, PNG, JPG, JPEG s√£o aceitos)",
                            "value": {
                                "detail": "Unsupported Media Type: O formato do arquivo 'curriculo.docx' n√£o √© suportado. Use PDF, PNG, JPG ou JPEG."
                            }
                        },
                        "arquivo_sem_extensao": {
                            "summary": "Arquivo sem extens√£o",
                            "description": "Arquivo enviado sem extens√£o no nome",
                            "value": {
                                "detail": "Unsupported Media Type: O arquivo 'curriculo' n√£o possui extens√£o."
                            }
                        },
                        "extensao_desconhecida": {
                            "summary": "Extens√£o desconhecida",
                            "description": "Arquivo com extens√£o n√£o reconhecida pelo sistema",
                            "value": {
                                "detail": "Unsupported Media Type: O formato do arquivo 'curriculo.txt' n√£o √© suportado. Use PDF, PNG, JPG ou JPEG."
                            }
                        }
                    }
                }
            }
        },
        422: {
            "description": "‚ùå Erros de Valida√ß√£o e Processamento",
            "content": {
                "application/json": {
                    "examples": {
                        "uuid_invalido": {
                            "summary": "request_id inv√°lido",
                            "description": "UUID fornecido n√£o √© v√°lido ou n√£o √© vers√£o 4",
                            "value": {
                                "detail": "request_id deve ser um UUID v4 v√°lido."
                            }
                        },
                        "user_id_vazio": {
                            "summary": "user_id vazio",
                            "description": "Campo user_id n√£o foi preenchido ou cont√©m apenas espa√ßos",
                            "value": {
                                "detail": "user_id n√£o pode ser vazio."
                            }
                        },
                        "user_id_muito_longo": {
                            "summary": "user_id muito longo",
                            "description": "Campo user_id excede o limite de 50 caracteres",
                            "value": {
                                        "detail": [
                                            {
                                            "type": "string_too_long",
                                            "loc": [
                                                "body",
                                                "user_id"
                                            ],
                                            "msg": "String should have at most 50 characters",
                                            "input": "012345678901234567890123456789012345678901234567890",
                                            "ctx": {
                                                "max_length": 50
                                            }
                                            }
                                        ]
                                    }
                        },
                        "query_muito_longa": {
                            "summary": "query muito longa",
                            "description": "Campo query excede o limite de 2500 caracteres",
                            "value": {
                                "detail": [
                                    {
                                    "type": "string_too_long",
                                    "loc": [
                                        "body",
                                        "query"
                                    ],
                                    "msg": "String should have at most 2500 characters",
                                    "input": "Input string",
                                    "ctx": {
                                        "max_length": 2500
                                    }
                                    }
                                ]
                            }
                        },
                        "arquivo_sem_nome": {
                            "summary": "Arquivo sem nome",
                            "description": "Um dos arquivos foi enviado sem nome de arquivo",
                            "value": {
                                "detail": "Um dos arquivos foi enviado sem nome."
                            }
                        },
                        "falha_total_processamento": {
                            "summary": "Falha total no processamento",
                            "description": "Nenhum arquivo p√¥de ser processado com sucesso ap√≥s todas as tentativas",
                            "value": {
                                "detail": {
                                    "message": "Nenhum curr√≠culo p√¥de ser processado com sucesso ap√≥s 3 tentativas.",
                                    "failed_files": [
                                        "curriculo_corrompido.pdf", 
                                        "arquivo_vazio.pdf",
                                        "imagem_ilegivel.png"
                                    ],
                                    "request_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                                }
                            }
                        },
                        "campos_obrigatorios": {
                            "summary": "Campos obrigat√≥rios ausentes",
                            "description": "Um ou mais campos obrigat√≥rios n√£o foram fornecidos",
                            "value": {
                                "detail": [
                                    {
                                        "type": "missing",
                                        "loc": ["body", "request_id"],
                                        "msg": "Field required",
                                        "input": None
                                    },
                                    {
                                        "type": "missing", 
                                        "loc": ["body", "user_id"],
                                        "msg": "Field required",
                                        "input": None
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        500: {
            "description": "‚ùå Erro interno do servidor",
            "content": {
                "application/json": {
                    "examples": {
                        "erro_interno_generico": {
                            "summary": "Erro interno gen√©rico",
                            "description": "Erro inesperado no servidor durante o processamento",
                            "value": {
                                "detail": "Internal Server Error: Erro inesperado no servidor. Tente novamente mais tarde."
                            }
                        },
                        "erro_banco_dados": {
                            "summary": "Erro de banco de dados",
                            "description": "Falha ao conectar ou gravar no banco de dados",
                            "value": {
                                "detail": "Internal Server Error: Erro ao acessar banco de dados. Tente novamente mais tarde."
                            }
                        },
                        "erro_servico_ocr": {
                            "summary": "Erro no servi√ßo de OCR",
                            "description": "Falha cr√≠tica no sistema de OCR",
                            "value": {
                                "detail": "Internal Server Error: Servi√ßo de OCR indispon√≠vel. Tente novamente mais tarde."
                            }
                        },
                        "erro_servico_ai": {
                            "summary": "Erro no servi√ßo de IA",
                            "description": "Falha cr√≠tica no sistema de an√°lise de IA",
                            "value": {
                                "detail": "Internal Server Error: Servi√ßo de IA indispon√≠vel. Tente novamente mais tarde."
                            }
                        },
                        "timeout_processamento": {
                            "summary": "Timeout no processamento",
                            "description": "Processamento excedeu o tempo limite permitido",
                            "value": {
                                "detail": "Internal Server Error: Timeout no processamento. Reduza o n√∫mero de arquivos ou tente novamente."
                            }
                        }
                    }
                }
            }
        }
    },
    tags=["An√°lise de Curr√≠culos"]
)
async def analyze_resumes(
    request_id: str = Form(
        ..., 
        description="**UUID v4 √∫nico** para identificar esta requisi√ß√£o",
        example="f47ac10b-58cc-4372-a567-0e02b2c3d479",
    ),
    user_id: str = Form(
        ..., 
        description="**Identificador do usu√°rio** solicitante (m√°x. 50 caracteres)",
        example="recrutador_tech_01",
        max_length=MAX_USER_ID_LENGTH
    ),
    files: List[UploadFile] = File(
        ..., 
        description="**Lista de curr√≠culos** para an√°lise (PDF, PNG, JPG, JPEG - m√°x. 10MB cada, 20 arquivos total)",
    ),
    query: Optional[str] = Form(
        None, 
        description="""**Query opcional** para an√°lise direcionada:
        
**Sem Query**: Gera resumo geral identificando senioridade
**Com Query**: Ranqueia candidatos por adequa√ß√£o √† vaga (0-10)
        """,
        example="Desenvolvedor React Senior: TypeScript, Next.js, microservices, AWS, Docker, testes automatizados, lideran√ßa t√©cnica",
        max_length=MAX_QUERY_LENGTH
    )
):
    """
    ## An√°lise Inteligente de Curr√≠culos

    Processa curr√≠culos usando **OCR + IA** para extrair informa√ß√µes relevantes e gerar insights.

    ### üìã **Par√¢metros:**
    - **request_id**: UUID v4 √∫nico para rastreamento
    - **user_id**: Identificador do usu√°rio (m√°x. 50 chars)  
    - **files**: Curr√≠culos em PDF/PNG/JPG/JPEG (m√°x. 20 arquivos, 10MB cada)
    - **query**: Opcional - descri√ß√£o da vaga para ranqueamento

    ### üîÑ **Comportamento:**
    - **Sem Query**: An√°lise geral ‚Üí Score como string ("j√∫nior", "pleno", "s√™nior")
    - **Com Query**: An√°lise direcionada ‚Üí Score num√©rico (0.0-10.0) + ordena√ß√£o

    ### ‚ö° **Performance:**
    - Processamento ass√≠ncrono e concorrente
    - Retry autom√°tico para falhas tempor√°rias
    - Limite de 5 arquivos simult√¢neos

    ### üìä **Retorno:**
    - **200**: Pelo menos 1 arquivo processado com sucesso
    - **422**: Nenhum arquivo p√¥de ser processado (falha total)
    """
    print(f"\nüéØ Nova requisi√ß√£o recebida - ID: {request_id}")
    print(f"üë§ Usu√°rio: {user_id}")
    print(f"üìä Query: {query if query else 'Nenhuma'}")
    print(f"üìÅ Arquivos: {len(files)}")
    
    # 1. Valida√ß√£o das entradas
    validate_form_inputs(request_id, user_id, query)
    validate_file_list(files)

    # Normaliza a query (remove espa√ßos e converte string vazia para None)
    query = query.strip() if query else None
    if query == "":
        query = None

    # 2. Processamento ass√≠ncrono e concorrente dos arquivos com retry
    all_results = await process_resumes_concurrently(files, query)
    
    # 3. Separa√ß√£o dos resultados
    successful_results = [res for res in all_results if "error" not in res]
    failed_results = [res for res in all_results if "error" in res]
    
    print(f"üìà Resultados: {len(successful_results)} sucessos, {len(failed_results)} falhas")

    # 4. Verifica√ß√£o se pelo menos um arquivo foi processado com sucesso
    if not successful_results:
        print(f"üí• Falha total - nenhum arquivo processado com sucesso")
        
        # Log da falha no banco de dados
        log_entry = {
            "request_id": request_id, 
            "user_id": user_id,
            "query": query, 
            "resultado": "falha_total"
        }
        print(f"üíæ Salvando log de falha total no banco")
        database.log_request_sync(log_entry)
        
        failed_filenames = [res["filename"] for res in failed_results]
        raise HTTPException(
            status_code=422, 
            detail={
                "message": f"Nenhum curr√≠culo p√¥de ser processado com sucesso ap√≥s {MAX_RETRIES} tentativas.", 
                "failed_files": failed_filenames,
                "request_id": request_id
            }
        )

    # 5. Prepara√ß√£o da Resposta Final
    if query:
        print(f"üî¢ Ordenando resultados por pontua√ß√£o (query presente)")
        # Ordena apenas quando h√° query para ranqueamento
        sorted_results = sorted(successful_results, key=safe_get_score, reverse=True)
        final_response = {
            "request_id": request_id,
            "results": sorted_results
        }
    else:
        print(f"üìã Mantendo ordem original (sem query)")

        # Mant√©m ordem original quando n√£o h√° query
        final_response = {
            "request_id": request_id,
            "results": successful_results
        }
    
    # 6. Log no Banco de Dados
    log_entry = {
        "request_id": request_id, 
        "user_id": user_id,
        "query": query, 
        "resultado": final_response["results"]
    }
    
    database.log_request_sync(log_entry)

    print(f"‚úÖ Requisi√ß√£o {request_id} finalizada com sucesso\n")
    return final_response
